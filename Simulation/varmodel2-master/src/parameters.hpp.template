#ifndef parameters_hpp
#define parameters_hpp

#include <string>
#include <vector>
#include <array>

namespace varmodel {{

/*** DEBUGGING ***/

const bool {PRINT_FUNCTION_TRACE};
const int64_t {PRINT_DEBUG_LEVEL};

/*** OUTPUT SETTINGS ***/

// Path to database output file for sampled data, absolute or relative to the working directory the program is executed in.
const std::string {SAMPLE_DB_FILENAME};

// Whether or not to write out all hosts to database
const bool {OUTPUT_HOSTS};

// Whether or not to write out all strains, genes, and alleles to database
const bool {OUTPUT_STRAINS};

// Whether or not to write out all genes to database
const bool {OUTPUT_GENES};

// How often to sample infected hosts, in simulation time units
const double {HOST_SAMPLING_PERIOD};

// Number of infected hosts to sample
const double {HOST_SAMPLE_SIZE};

// Burn-in period for simulation before which output will not be written.
const double {T_BURNIN};

// EXPECTED time to reach equilibrium.
const double {EXPECTED_EQUILIBRIUM};

/*** VERIFICATION SETTINGS ***/

// How often to verify the validity of all data structures

const bool {VERIFICATION_ON};

const double {VERIFICATION_PERIOD};


/*** CHECKPOINT SETTINGS ***/

// Whether or not to load from a checkpoint file
const bool {LOAD_FROM_CHECKPOINT};

// Filename of checkpoint to load from
const std::string {CHECKPOINT_LOAD_FILENAME};

// Whether or not to save checkpoints
const bool {SAVE_TO_CHECKPOINT};

// Path to checkpoint output file
const std::string {CHECKPOINT_SAVE_FILENAME};

// How often, in simulation time units, to save checkpoints
const double {CHECKPOINT_SAVE_PERIOD};


/*** MODEL PARAMETERS ***/

enum SelectionMode {{
    SPECIFIC_IMMUNITY,
    GENERAL_IMMUNITY,
    NEUTRALITY
}};
const SelectionMode {SELECTION_MODE};

// Random seed for simulation.
const uint64_t {RANDOM_SEED};

// Simulation time corresponding to one year
const double {T_YEAR};
                
// Simulation end time
const double {T_END};

// Number of genes in the initial pool.
const uint64_t {N_GENES_INITIAL};

// Number of genes per pathogen strain.
const uint64_t {N_GENES_PER_STRAIN};

// Number of loci
const uint64_t {N_LOCI};

// Number of alleles at each locus, before mutations occur
const std::array<uint64_t,N_LOCI> {N_ALLELES_INITIAL};

// Transmissibility of genes
const double {GENE_TRANSMISSIBILITY}; 

// Whether coinfection reduces transmissibility
const bool {COINFECTION_REDUCES_TRANSMISSION};

// Global immunity loss rate
const double {IMMUNITY_LOSS_RATE};

// Probability per gene, per unit time of a mutation when a strain is picked up.
const double {MUTATION_RATE};

// Rate of ectopic recombination, per possibility; total rate for an infection
// is C(N_GENES_PER_STRAIN, 2) * ECTOPIC_RECOMBINATION_RATE 
const double {ECTOPIC_RECOMBINATION_RATE};

// Probability that an ectopic recombination is a conversion
const double {P_ECTOPIC_RECOMBINATION_IS_CONVERSION};

// Duration of liver stage (pre-expression)
const double {T_LIVER_STAGE};

// maximum number of liver infections
const uint64_t {MAX_LIVER_MOI};

// maximum number of ACTIVE infections
const uint64_t {MAX_ACTIVE_MOI};

// Gene deactivation rate when not immune or under neutrality
const double {TRANSITION_RATE_NOT_IMMUNE};

// Gene deactivation rate when fully immune
const double {TRANSITION_RATE_IMMUNE};

// probability[0,1] of direct clearance instead of transition due to immunity to genes
const double {CLEARANCE_PROB};

// Number of infections to gain immunity under general immunity
const uint64_t {N_INFECTIONS_FOR_GENERAL_IMMUNITY};

// Clearance rate paramters (only used for general immunity)
const std::array<double,4> {GENERAL_IMMUNITY_PARAMS};

// Clearance rate when immune (only used for general immunity)
const double {CLEARANCE_RATE_IMMUNE};

// whether a host gain immunity towards a gene only if the host has seen all the alleles.
// True: yes, False: gradule increase in immunity as the host seen more number of alleles in a gene.
const bool {WHOLE_GENE_IMMUNE};

// Use this as the mean of the (truncated) exponential distribution used to draw host lifetimes
const double {MEAN_HOST_LIFETIME};

// Use this as a maximum value for host lifetimes used to truncate the exponential distribution.
const double {MAX_HOST_LIFETIME};

// Number of populations
const uint64_t {N_POPULATIONS};

// Number of hosts, by population.
const std::vector<uint64_t> {N_HOSTS};

// Number of initial infections, by population.
const std::vector<uint64_t> {N_INITIAL_INFECTIONS};

// Parameters governing the biting rate sinusoid for each population
// BITING_RATE_MEAN: mean value.
// BITING_RATE_RELATIVE_AMPLITUDE: amplitude as a fraction of the mean.
// BITING_RATE_PEAK_PHASE: fraction of the year (between 0 and 1) at which the sinusoid should reach its peak. 
// The period of the sinusoid is T_YEAR.
const std::vector<double> {BITING_RATE_MEAN};
const std::vector<double> {BITING_RATE_RELATIVE_AMPLITUDE};
const std::vector<double> {BITING_RATE_PEAK_PHASE};
//matrix of distances between populations,each row is the distances from the focal pop to other populations
const std::vector<std::vector<double>> {DISTANCE_MAT};
//how is distance translated to prob of getting transmission from
//different pop? e.g., if there dist_power = 1, then prob of
//transmission is weighted by dist^(-dist_power) = 1/dist;
const double {DIST_POWER};
//otherwise a vector of daily biting rate with a length of 360 can be supplied
//biting rate = biting_Rate_mean * daily_biting_rate_distribution[day];
const std::vector<double> {DAILY_BITING_RATE_DISTRIBUTION};
//IRS parameters
const bool {IRS_ON};

const std::vector<double> {IRS_START_TIMES};
const std::vector<std::vector<double>>  {BITING_RATE_FACTORS};
const std::vector<double> {IRS_IMMIGRATION_RATE_FACTORS};
//MDA parameters
const bool {MDA_ON};
const std::vector<double> {MDA_START_TIMES};
const std::vector<double> {HOST_FAIL_RATE};
const std::vector<double> {DRUG_EFF_DURATION};
const std::vector<double> {MDA_IMMIGRATION_RATE_FACTORS};

// Whether or not to enable immigration
const bool {IMMIGRATION_ON};

// Immigration rate
// new change here: Immigration rate here is the ratio of migration rates to biting rates
// in infectious diseases, reproductive rate = biting rate, generation time = 1/biting rate
// actual migration rate is updated when biting rates are updated. 
const std::vector<double> {IMMIGRATION_RATE};
const bool {MIGRANTS_MATCH_LOCAL_PREVALENCE};
// ratio of effective population size of the regional pool compared to local pool, e.g., 10
// this number determines the regional pool gene mutation and turnover rates.
const double {REGION_TO_LOCAL_POP_SIZE_RATIO};
    
// Number of new genes created during immigration

}} // namespace varmodel

#endif // #ifndef parameters_hpp
